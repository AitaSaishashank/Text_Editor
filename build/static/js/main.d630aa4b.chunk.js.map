{"version":3,"sources":["components/Navbar.js","components/Textarea.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","style","borderRadius","backgroundColor","height","width","border","onClick","Tored","role","effect","htmlFor","change","Textarea","changeStyle","x","setstyle","fontFamily","showAlert","useState","text","settext","count","setCount","heading","onChange","event","target","value","rows","disabled","length","newtext","toUpperCase","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","getSelection","removeAllRanges","split","join","fontSize","color","filter","variable","Alert","word","lower","charAt","slice","capitalize","message","prototypes","PropTypes","string","isRequired","App","mydesign","setmydesign","setAlert","setTimeout","setmode","alert","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d630aa4b.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nexport default function Navbar(props) {\r\n    return (\r\n        <div>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`} >\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n   <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n        </li>\r\n      </ul>\r\n      <button className=\"red\" style={{borderRadius:'50%',backgroundColor:'red',height:'15px',width:'15px',border:'1px solid black'}} onClick={props.Tored}></button>&ensp;\r\n      <div className=\"form-check form-switch \">\r\n           <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.effect}/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\"><b><i>{props.change}</i></b></label>\r\n          </div>\r\n          \r\n            \r\n            \r\n    </div> \r\n  </div>\r\n</nav>\r\n        </div>\r\n    )\r\n}\r\nNavbar.prototypes={title:PropTypes.string.isRequired}","import React,{useState} from 'react'\r\nexport default function Textarea(props) {\r\n    const handleupclick=()=>{\r\n          let newtext=text.toUpperCase();\r\n          settext(newtext);\r\n          props.showAlert(\"Converted to Uppercase\",\"success\")\r\n    }\r\n     const handleloclick=()=>{\r\n          let newtext=text.toLowerCase();\r\n          settext(newtext);\r\n          props.showAlert(\"Converted to Lowercase\",\"success\")\r\n    }\r\n    const handleclear=()=>{\r\n          let newtext='';\r\n          settext(newtext);\r\n          props.showAlert(\"Text Cleared\",\"success\")\r\n    }\r\n   const handlecopy=()=>{\r\n          let newtext=document.getElementById(\"mytext\");\r\n          newtext.select()\r\n           navigator.clipboard.writeText.style={style};\r\n          navigator.clipboard.writeText(newtext.value);\r\n          document.getSelection().removeAllRanges()\r\n           props.showAlert(\"Text Copied\",\"success\")\r\n    }\r\n    const handlespaces=()=>{\r\n          let newtext=text.split(/[ ]+/);\r\n          settext(newtext.join(\" \"));\r\n          props.showAlert(\"Extra Spaces Are Removed\",\"success\")\r\n    }\r\n     let counter=() => {\r\n         if(count<5){\r\n         setCount(count + 1)\r\n         }\r\n         else{\r\n             setCount(0)\r\n         }\r\n        changeStyle(count)}\r\n    const changeStyle=(x)=>{\r\n        if(x===1){\r\n            setstyle({fontFamily:'fantasy'})\r\n            props.showAlert(\"Font Changed\",\"success\")\r\n        }\r\n        else if(x===2){\r\n             setstyle({fontFamily:'cursive'})\r\n             props.showAlert(\"Font Changed\",\"success\")\r\n        }\r\n        else if(x===3){\r\n             setstyle({fontFamily:'Lucida Handwriting'})\r\n             props.showAlert(\"Font Changed\",\"success\")\r\n        }\r\n        else if(x===4){\r\n             setstyle({fontFamily:'GungsuhChe'})\r\n             props.showAlert(\"Font Changed\",\"success\")\r\n        }\r\n        else if(x===5){\r\n             setstyle({fontFamily:'Brush Script MT'})\r\n             props.showAlert(\"Font Changed\",\"success\")\r\n        }\r\n        else{\r\n             setstyle({fontFamily:'Georgia'})\r\n             props.showAlert(\"Only 5 Fonts are Avaliable\",\"success\")\r\n        }\r\n    }\r\n    const change=(event)=>{\r\n       settext(event.target.value);\r\n    }\r\n    const [text, settext] = useState('ENTER TEXT HERE');\r\n     const [count, setCount] = useState(1);\r\n    const [style, setstyle] = useState({\r\n        fontFamily: 'Georgia'})\r\n    return (\r\n        <div>\r\n           <div className=\"mb-3\">\r\n               <h1>{props.heading}</h1>\r\n             <textarea className=\"form-control\" id=\"mytext\" onChange={change} value={text} rows=\"10\" style={style}></textarea>\r\n             </div>\r\n             <button disabled={text.length===0} type=\"button\" className=\"btn btn-dark mx-2 my-2\" onClick={handleupclick}><i>Covert to Uppercase</i></button>\r\n             <button disabled={text.length===0} type=\"button\" className=\"btn btn-dark mx-2 my-2\" onClick={handleloclick}><i>Covert to Lowercase</i></button>\r\n             <button disabled={text.length===0} type=\"button\" className=\"btn btn-dark mx-2 my-2\" onClick={handleclear}><i>Clear Text</i></button>\r\n             <button disabled={text.length===0} type=\"button\" className=\"btn btn-dark mx-2 my-2\" onClick={handlecopy}><i>Copy Text</i></button>\r\n             <button disabled={text.length===0} type=\"button\" className=\"btn btn-dark mx-2 my-2\" onClick={handlespaces}><i>Remove Extra Spaces</i></button>\r\n            <button disabled={text.length===0} type=\"button\" className=\"btn btn-dark mx-2 my-2\" onClick={counter} ><i>Change Font </i></button>\r\n             <div className=\"container\" >\r\n               <p>{text.length>0?<p style={{fontSize:'22px',color:'#0a5a6a'}}><i>The Font of the text is \"<b><i>{style.fontFamily}</i></b>\"</i></p>:\" \"}</p>\r\n                 <h3><b>Preview</b></h3>\r\n                  <p><i>{text.length>0?text:\"Enter Text To Preview!\"}</i></p>\r\n                 <b>{text.split(/\\s+/).filter((variable)=>{return variable.length!==0}).length}</b><i> words and </i><b>{text.length}</b> <i>characters</i>\r\n                <p> <b>{0.008*text.split(/\\s+/).filter((variable)=>{return variable.length!==0}).length}</b> <i>Minutes to Read</i> </p>\r\n             </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize=(word)=>{\r\n        let lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    }\r\n    return (\r\n        <div style={{height:'55px'}}>\r\n       { props.Alert && <div className={`alert alert-${props.Alert.type} alert-dismissible fade show`}   role=\"alert\">\r\n           <strong>{capitalize(props.Alert.type)}</strong>.{props.Alert.message} \r\n           </div>  }\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport { useState } from 'react';\nimport Navbar from './components/Navbar';\nimport Textarea from './components/Textarea';\nimport Alert from './components/Alert';\nfunction App() {\n  const [mydesign, setmydesign] = useState({\n        color:'black',\n        backgroundColor:'white',\n         height: '100vh',\n    })\n   const darkmode=()=>{\n      if(mydesign.color==='black'){\n        setmydesign({\n          color:'white',\n          backgroundColor:'#042743',\n          height: '100vh',\n        })\n        settext(\"Disable Dark Mode\")\n        setmode('dark')\n        showAlert(\"Enabled Dark Mode\",\"success\")\n        \n      }\n      else if(mydesign.backgroundColor==='#8f0815'){\n        setmydesign({\n          color:'#dde5e7',\n          backgroundColor:'#042743',\n          height: '100vh',\n        })\n        settext(\"Disable Dark Mode\")\n        setmode('dark')\n        showAlert(\"Enabled Dark Mode\",\"success\")\n  \n      }\n      else if(mydesign.color==='#dde5e7'){\n        setmydesign({\n          color:'#dde5e7',\n          backgroundColor:'#8f0815',\n          height: '100vh',\n        })\n        settext(\"Enable Dark Mode\")\n        setmode('secondary')\n        showAlert(\"Disabled Dark Mode\",\"success\")\n        \n      }\n        else{\n         setmydesign({\n          color:'black',\n          backgroundColor:'white',\n          height: '100vh',\n        })\n        settext(\"Enable Dark Mode\")\n        setmode('light')\n        showAlert(\"Disabled Dark Mode\",\"success\");\n       \n        }\n      }\n      const bred=()=>{\n        if(mydesign.color==='black'){\n         setmydesign({\n          color:'white',\n          backgroundColor:'#8f0815',\n          height: '100vh'\n         })\n         setmode('secondary')\n          }\n          else if(mydesign.backgroundColor==='#042743'){\n            showAlert(\"Cannot activate,Because you are in dark mode\",\"warning\");\n          }\n          else{\n            setmydesign({\n          color:'black',\n          backgroundColor:'white',\n          height: '100vh',\n              })\n              setmode('light')\n          }}\n    const showAlert=(message,type)=>{\n            setAlert({\n              message:message,\n              type:type\n            })\n            if(message===\"Only 5 Fonts are Avaliable\"){\n            setTimeout(() => {\n              setAlert(null)\n            }, 1500);}\n            else if(message===\"Cannot activate,Because you are in dark mode\"){\n            setTimeout(() => {\n              setAlert(null)\n            }, 1500);}\n            else{\n              setTimeout(() => {\n              setAlert(null)\n            },800);\n            }\n      }\n       const [mode, setmode] = useState('light')\n       const [text, settext] = useState(\"Enable Dark Mode\")\n       const [alert, setAlert] = useState(null)\n  return (\n    <div style={mydesign}>\n    <Navbar title=\"TextEditor\" mode={mode} effect={darkmode} change={text} Tored={bred}/>\n    <Alert Alert={alert}/>\n    <div className=\"container\">\n      <Textarea heading=\"Enter your text to Analyze:\" showAlert={showAlert}/>\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}